{"version":3,"sources":["board/Slot.js","board/Board.js","storage/Storage.js","App.js","setup/Setup.js","leaderBoard/LeaderBoard.js","ticTacToe/Player.js","ticTacToe/PlayersManager.js","ticTacToe/TicTacToe.js","routes/Routes.js","index.js"],"names":["Slot","props","filledClass","player","concat","winner","react_default","a","createElement","className","onClick","onSlotClick","index","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","slots","Array","fill","slotClick_","handleSlotClick_","bind","assertThisInitialized","_this2","_this$props","filledSlots","winnerSlots","map","slot","Slot_Slot","key","includes","get","renderSlots_","PureComponent","Storage","storageName","arguments","length","undefined","initialValue","localStorage","getItem","setItem","JSON","parse","data","stringify","App","hasNoPlayers_","setPlayersFromURL_","state","Map","game","getBoard","onGameEnd","onGameEnd_","storage_","onSlotClick_","_this$props$match$par","match","params","firstPlayer","secondPlayer","playersManager_","addPlayer","checkErros","some","error","code","gameLeaderBoard","getData","update","name","toConsumableArray","setState","fillSlot","board_Board","react_router_dom","to","leaderboardMessage","Component","Setup","clearBoard","onPlayerTwoNameChange_","onPlayerOneNameChange_","onFormSubmit_","playerOneName","playerTwoName","_this$state","event","preventDefault","_this$state2","lenght","history","push","target","value","disabled","disableForm_","type","placeholder","onChange","id","LeaderBoard","storage","leaderBoard","goBack","renderWinnerMessage_","leader","Player","opts","class","PlayersManager","players","erros_","players_","currentPlayerIndex_","createPlayers_","playerName","Error","toLowerCase","currentPlayerIndex","switchPlayer","TicTacToe","playerOne","playerTwo","board_","playerId","checkSlot_","checkSlots_","currentPlayerId","isFunction","currentPlayer_","getCurrentPlayer","size","currentPlayer","set","getWinner_","onEndGame_","nextPlayerTurn","clear","hasWinner","checkLines_","checkColumns_","checkDiagonalUpLeft_","checkDiagonalUpRight_","ReactDOM","render","basename","process","react_router","exact","path","route","setup_Setup","assign","src_App_0","leaderBoard_LeaderBoard","document","getElementById"],"mappings":"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","file":"static/js/main.21c8df36.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Slot = props => {\n  let filledClass = '';\n\n  if (props.player) {\n    filledClass += `filled player${props.player}`;\n  }\n\n  if (props.winner) {\n    filledClass += ' winner';\n  }\n\n  return (\n    <div\n      className={`board-slot ${filledClass}`}\n      onClick={() => props.onSlotClick(props.index)}\n    />\n  );\n};\n","import React, { PureComponent } from 'react';\nimport { Slot } from './Slot';\nimport './board.css';\n\n/* *\n * Class that renders the game board.\n * */\nclass Board extends PureComponent {\n\n  /**\n   * Creates a Board.\n   */\n  constructor(props) {\n    super(props);\n    this.slots = Array(9).fill(0, 0, 9);\n    this.slotClick_ = this.handleSlotClick_.bind(this);\n  }\n\n  handleSlotClick_(index) {\n    this.props.onSlotClick(index);\n  }\n\n  /**\n   * Renders board slots that will be fufilled by gamers' pieces.\n   * @private \n   */\n  renderSlots_() {\n    let { filledSlots, winnerSlots } = this.props;\n    return this.slots.map((slot, index) => {\n      return (\n        <Slot\n          key={index}\n          winner={winnerSlots.includes(index)}\n          player={filledSlots.get(index)}\n          index={index}\n          onSlotClick={this.slotClick_}\n        />\n      );\n    })\n  }\n\n  /**\n   * @inheritdoc\n   */\n  render() {\n    return (\n      <div className=\"board\">\n        {this.renderSlots_()}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","class Storage {\n  constructor(storageName = 'gameLeaderBoard', initialValue = '[]') {\n    this.storageName = storageName;\n    if (!localStorage.getItem(storageName)) {\n      localStorage.setItem(storageName, initialValue);\n    }\n  }\n\n  getData() {\n    return JSON.parse(localStorage.getItem(this.storageName));\n  }\n\n  update(data) {\n    localStorage.setItem(this.storageName, JSON.stringify(data));\n  }\n}\n\nexport default Storage;\n","import React, { Component } from 'react';\nimport Board from './board/Board';\nimport Storage from './storage/Storage';\nimport { Link } from 'react-router-dom'\nimport './App.css';\n\n/**\n * Initialize the game asking for players information. Manage players\n * turns and set in the board filled slots.\n * @author Fernando Souza nandosouzafilho@gmail.com\n **/\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    if (this.hasNoPlayers_()) {\n      this.setPlayersFromURL_();\n    }\n\n    this.state = {\n      filledSlots: new Map(this.props.game.getBoard()),\n      winnerSlots: []\n    };\n    this.props.game.onGameEnd = this.onGameEnd_.bind(this);\n    this.storage_ = new Storage();\n    this.onSlotClick_ = this.handleSlotClick_.bind(this);\n  }\n\n  /**\n   * Uses url parameters to create players.\n   * @private\n   **/\n  setPlayersFromURL_() {\n    const { firstPlayer, secondPlayer } = this.props.match.params;\n    this.props.game.playersManager_.addPlayer(firstPlayer);\n    this.props.game.playersManager_.addPlayer(secondPlayer);\n  }\n\n  /**\n   * Checks if players was not already defined.\n   * @returns {Boolean}\n   * @private\n   **/\n  hasNoPlayers_() {\n    return this.props.game.playersManager_\n      .checkErros()\n      .some(error => error.code === 'no_players');\n  }\n\n  /**\n   * Callback method that will be called when the game is finished. It updates\n   * the local storage with the new winner and go to the Leaderboard page.\n   * @param {Object} winner The Player object.\n   * @private\n   **/\n  onGameEnd_(winner) {\n    if (winner) {\n      let gameLeaderBoard = this.storage_.getData();\n      this.storage_.update([winner.player.name, ...gameLeaderBoard]);\n      this.setState({\n        winnerSlots: winner.slots,\n        winner: winner\n      });\n    }\n  }\n\n  /**\n   * Handles the click event on the each slot and updates the filledSlots\n   * state.\n   * the turn to the next player.\n   * @param {Number} index The Board Slot index.\n   * @private\n   **/\n  handleSlotClick_(index) {\n    if (this.state.winnerSlots.length > 0) {\n      return;\n    }\n    this.props.game.fillSlot(index);\n    this.setState({\n      filledSlots: new Map(this.props.game.getBoard())\n    });\n  }\n\n  /**\n   * @inheritdoc\n   **/\n  render() {\n    const leaderboardMessage = () => {\n      if (this.state.winner) {\n        return (\n          <p className=\"winner-message\">\n            Congratulations {this.state.winner.player.name}. <Link to=\"/leaderboard\">\n              See leaderboard\n            </Link>\n          </p>\n        );\n      }\n    }\n    return (\n      <div className=\"tic-tac-toe-app\">\n        <Board\n          winnerSlots={this.state.winnerSlots}\n          filledSlots={this.state.filledSlots}\n          onSlotClick={this.onSlotClick_}\n        />\n\n        <Link className=\"button new-game-button\" to=\"/\">\n          New game\n        </Link>\n\n        <div className=\"app-footer\">\n        {leaderboardMessage()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport './setup.css';\n\n/**\n * Component responsible for getting players` name and passes it to the parent \n * component through a function named `onFinishSetup`.\n **/\nclass Setup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.props.game.clearBoard();\n\n    this.onPlayerTwoNameChange_ = this.onPlayerTwoNameChange_.bind(this);\n    this.onPlayerOneNameChange_ = this.onPlayerOneNameChange_.bind(this);\n    this.onFormSubmit_ = this.onFormSubmit_.bind(this);\n\n    this.state = {\n      playerOneName: '',\n      playerTwoName: '',\n    }\n  }\n\n  /**\n   * Express conditions to disable form submission.\n   * @returns {boolean} true for disable and false for enable\n   * @private \n   **/\n  disableForm_() {\n    let { playerOneName, playerTwoName } = this.state;\n    return !playerOneName || !playerTwoName || playerOneName === playerTwoName;\n  }\n\n  /**\n   * Listens to the form submission and informs players` name to the\n   * parent component.\n   * @param {event} event The event object\n   * @private \n   **/\n  onFormSubmit_(event) {\n    event.preventDefault();\n    let { playerOneName, playerTwoName } = this.state;\n    if (!this.props.game.playersManager_.checkErros().lenght) {\n      this.props.history.push(`/firstPlayer/${playerOneName}/secondPlayer/${playerTwoName}`);\n    }\n  }\n\n  /**\n   * Stores the first player's name in the state object.\n   * @param {event} event The event object\n   * @private \n   **/\n  onPlayerOneNameChange_(event) {\n    this.setState({\n      playerOneName: event.target.value\n    });\n  }\n  \n  /**\n   * Stores the second player's name in the state object.\n   * @param {event} event The event object\n   * @private \n   **/\n  onPlayerTwoNameChange_(event) {\n    this.setState({\n      playerTwoName: event.target.value\n    });\n  }\n\n  /**\n   * @inheritdoc\n   **/\n  render() {\n    let disabled = this.disableForm_();\n\n    return (\n      <div className=\"tic-tac-toe-app\">\n        <div className=\"setup-page\">\n          <div className=\"collumn\">\n            <div className=\"player\">\n              <div className=\"icon-x\"></div>\n            </div>\n            <input\n              type=\"text\"\n              value={this.state.playerOneName}\n              placeholder=\"Player one\"\n              onChange={this.onPlayerOneNameChange_}\n              id=\"playerOne\" />\n          </div>\n\n          <div className=\"collumn\">\n            <div className=\"player\">\n              <div className=\"icon-circle\"></div>\n            </div>\n            <input\n              type=\"text\"\n              value={this.state.playerTwoName}\n              placeholder=\"Player two\"\n              onChange={this.onPlayerTwoNameChange_}\n              id=\"playerTwo\" />\n          </div>\n        </div>\n        <button disabled={disabled} onClick={this.onFormSubmit_}> Start! </button>\n      </div>\n    );\n  }\n}\n\nexport default Setup;\n","import React, { Component } from 'react';\nimport Storage from '../storage/Storage';\nimport { Link } from 'react-router-dom'\nimport './leader-board.css';\n\nclass LeaderBoard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  /**\n   * @inheritdoc\n   */\n  componentWillMount() {\n    let storage = new Storage().getData();\n    this.setState({\n      leaderBoard: storage\n    });\n  }\n\n  /**\n   * Renders winner congratulation message.\n   * @private \n   */\n  renderWinnerMessage_() {\n    let  { winner } = this.props.match.params;\n\n    if (!winner) {\n      return (\n        <div>\n          <p>\n            We do not have leaders to how.\n            Why don't you <Link to=\"/\">play</Link> to see if you can put \n            your name here?\n          </p>\n          <Link to=\"/\">New game</Link>\n        </div>\n      )\n    }\n\n    return (\n      <div>\n        <p>\n          Congratulations, <strong>{winner}</strong>!!!\n          Now you are in our leaderboard.\n        </p>\n\n        <p>\n          Are you ready to <button type=\"button\" onClick={this.props.history.goBack}>\n          play again</button> aganst you partner or start a \n          <Link to=\"/\">new game</Link>?\n        </p>\n      </div>\n    );\n  }\n\n  /**\n   * @inheritdoc\n   */\n  render() {\n    let leaderBoard = this.state.leaderBoard;\n    return (\n      <div className=\"leader-board\">\n        <h1>Leaderboard</h1>\n        {this.renderWinnerMessage_()}\n        <ul>\n        {leaderBoard.map((leader, key) => {\n          return <li key={key}>{leader}</li>\n        })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default LeaderBoard\n","class Player {\n  constructor(opts) {\n    this.id = opts.id;\n    this.name = opts.name || '';\n    this.class = opts.class || ''\n  }\n}\n\nexport default Player;\n","import Player from './Player';\n\n/**\n * Manages players providing a public API for adding players and sets which one \n * is in the turn.\n **/\nclass PlayersManager {\n  erros_ = [];\n  players_ = [];\n  currentPlayerIndex_ = 0;\n\n  constructor(players = []) {\n    this.createPlayers_(players);\n  }\n\n  /**\n   * Adds a single player to the array of players by crating a new Player\n   * instance.\n   * @param {String} playerName The player data to create a new Player instance.\n   **/\n  addPlayer(playerName) {\n    if (!playerName) {\n      throw Error('Player configuration should be informed');\n    }\n    const player = {\n      name: playerName,\n      id: this.players_.length + 1,\n      class: 'player' + this.players_.length + 1\n    };\n    this.players_.push(new Player(player));\n  }\n\n  /**\n   * Checks if there are erros regarding players.\n   * @returns {Array} Array of errors\n   **/\n  checkErros() {\n    this.erros_ = [];\n    if (!this.players_.length) {\n      this.erros_.push({ code: 'no_players' });\n      return this.erros_;\n    }\n    if (\n      this.players_[0].name.toLowerCase() ===\n      this.players_[1].name.toLowerCase()\n    ) {\n      this.erros_.push({ code: 'duplicated_names' });\n    }\n    return this.erros_;\n  }\n\n  /**\n   * Method used by the class constructor to create fill the initial list of\n   * players.\n   * @param {Array<Object>} players A array of players data.\n   * @private\n   **/\n  createPlayers_(players) {\n    this.players_ = players.map(player => {\n      return new Player(player);\n    });\n  }\n\n  /**\n   * Returns the current player.\n   * @returns {Object} Player\n   **/\n  getCurrentPlayer() {\n    return this.players_[this.currentPlayerIndex_];\n  }\n\n  /**\n   * Returns the list of players.\n   * @returns {Array<Object>} The list of players\n   **/\n  getPlayers() {\n    return [...this.players_];\n  }\n\n  /**\n   * Changes the game turn to the next available player. Select the first player\n   * of the array if no next one is found.\n   **/\n  nextPlayerTurn() {\n    let currentPlayerIndex = this.currentPlayerIndex_;\n    currentPlayerIndex++;\n\n    if (currentPlayerIndex >= this.players_.length) {\n      currentPlayerIndex = 0;\n    }\n\n    return this.switchPlayer(currentPlayerIndex);\n  }\n\n  /**\n   * Changes the current player by providing its index.\n   * @param {number} index The player index.\n   **/\n  switchPlayer(index) {\n    if (index !== 0 && this.players_.length < index) {\n      throw Error('Player not found');\n    }\n    this.currentPlayerIndex_ = index;\n    return this.players_[index];\n  }\n}\n\nexport default PlayersManager;\n","import PlayersManager from '../ticTacToe/PlayersManager';\nimport { isFunction } from 'underscore';\n\nclass TicTacToe {\n  onGameEnd;\n\n  constructor(playerOne, playerTwo, onGameEnd) {\n    this.board_ = new Map();\n    this.onGameEnd = onGameEnd;\n    this.playersManager_ = new PlayersManager();\n    if (playerOne && playerTwo) {\n      this.playersManager_.addPlayer(playerOne);\n      this.playersManager_.addPlayer(playerTwo);\n    }\n  }\n\n  checkSlots_(slots, playerId) {\n    if (slots.length < 3) {\n      return;\n    }\n\n    if (\n      this.checkSlot_(slots[0], playerId) &&\n      this.checkSlot_(slots[1], playerId) &&\n      this.checkSlot_(slots[2], playerId)\n    ) {\n      return slots;\n    }\n  }\n\n  /**\n   * Checks if there is any matched column by a given player.\n   * @param {Number} playerId The player id to be checked.\n   * @returns {boolean} Returns true if a matched column is found, otherwise\n   * it returns false.\n   * @private\n   **/\n  checkColumns_(playerId) {\n    return (\n      this.checkSlots_([0, 3, 6], playerId) ||\n      this.checkSlots_([1, 4, 7], playerId) ||\n      this.checkSlots_([2, 5, 8], playerId)\n    );\n  }\n\n  /**\n   * Checks if the diagonal line starting from the top-left slot has been\n   * filled by the current player.\n   * @param {Number} playerId The player id to be checked.\n   * @returns {boolean} Returns true if the diagonal line has been filled by\n   * a player, otherwise, false.\n   * @private\n   **/\n  checkDiagonalUpLeft_(playerId) {\n    return this.checkSlots_([0, 4, 8], playerId);\n  }\n\n  /**\n   * Checks if the diagonal line starting from the top-right slot has been\n   * filled by the current player.\n   * @param {Number} playerId The player id to be checked.\n   * @returns {boolean} Returns true if the diagonal line has been filled by\n   * a player, otherwise, false.\n   * @private\n   **/\n  checkDiagonalUpRight_(playerId) {\n    return this.checkSlots_([2, 4, 6], playerId);\n  }\n\n  /**\n   * Walks through Board lines looking for unmatched slots in order to\n   * determine if the current player got a line matching. Returns true if\n   * it has, otherwise returns false.\n   * @param {Number} playerId The player id to be checked\n   * @returns {boolean} Returns true if a matched line is found, otherwise, false.\n   * @private\n   **/\n  checkLines_(playerId) {\n    return (\n      this.checkSlots_([0, 1, 2], playerId) ||\n      this.checkSlots_([3, 4, 5], playerId) ||\n      this.checkSlots_([6, 7, 8], playerId)\n    );\n  }\n\n  /**\n   * Checks if the slot was filled by an given player.\n   * @param {Number} index The slot index.\n   * @param {Number} currentPlayerId The player id.\n   * @private\n   **/\n  checkSlot_(index, currentPlayerId) {\n    return this.board_.get(index) === currentPlayerId;\n  }\n\n  /**\n   * Calls the onGameEnd listener callback with the winner's instance.\n   * @param {Object|undefined} winner The user who won the game.\n   **/\n  onEndGame_(winner) {\n    if (isFunction(this.onGameEnd)) {\n      return this.onGameEnd(winner);\n    }\n  }\n\n  /**\n   * Fills a specific board slot and also checks if there is a winner,\n   * if it has, do not call the next game turn and end the game.\n   * @param {Number} index the slot index.\n   **/\n  fillSlot(index) {\n    let currentPlayer_ = this.playersManager_.getCurrentPlayer();\n    if (this.board_.get(index)) {\n      return;\n    }\n\n    if (this.board_.size < 9) {\n      let currentPlayer = currentPlayer_;\n      this.board_.set(index, currentPlayer.id);\n    }\n\n    let winner = this.getWinner_();\n\n    if (winner || this.board_.size === 9) {\n      this.onEndGame_(winner);\n    } else {\n      this.playersManager_.nextPlayerTurn();\n    }\n  }\n\n  /**\n   * Returns the list of filled slots.\n   * @returns {Map<Object>} The game board.\n   **/\n  getBoard() {\n    return this.board_;\n  }\n\n  clearBoard() {\n    this.board_.clear();\n  }\n\n  /**\n   * Checks all the possibilities of have a winner and return the Player instance.\n   * @returns {Object|undefined} Returns the currentPlayer if a winner is found\n   * @private\n   **/\n  getWinner_() {\n    let currentPlayer = this.playersManager_.getCurrentPlayer();\n    let playerId = currentPlayer.id;\n    let hasWinner =\n      this.checkLines_(playerId) ||\n      this.checkColumns_(playerId) ||\n      this.checkDiagonalUpLeft_(playerId) ||\n      this.checkDiagonalUpRight_(playerId);\n\n    if (hasWinner) {\n      return {\n        player: currentPlayer,\n        slots: hasWinner\n      };\n    }\n  }\n}\n\nexport default TicTacToe;\n","import React from 'react';\nimport App from '../App';\nimport Setup from '../setup/Setup';\nimport LeaderBoard from '../leaderBoard/LeaderBoard';\nimport TicTacToe from '../ticTacToe/TicTacToe';\nimport {\n  BrowserRouter as Router,\n  Route\n} from 'react-router-dom';\n\nconst game = new TicTacToe();\n\nexport default () => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div>\n        <Route exact path=\"/\" render={route => {\n            return <Setup {...route} game={game} />;\n          }}\n        />\n        <Route path=\"/firstPlayer/:firstPlayer/secondPlayer/:secondPlayer\" render={route => {\n            return <App {...route} game={game} />;\n          }}\n        />\n        <Route path=\"/leaderboard\" render={route => {\n            return <LeaderBoard {...route} game={game} />;\n          }}\n        />\n      </div>\n    </Router>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './routes/Routes';\n\nReactDOM.render(\n  <Routes />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}