{"version":3,"sources":["board/Slot.js","board/Board.js","storage/Storage.js","App.js","setup/Setup.js","leaderBoard/LeaderBoard.js","ticTacToe/Player.js","ticTacToe/PlayersManager.js","ticTacToe/TicTacToe.js","routes/Routes.js","index.js"],"names":["Slot","props","filledClass","player","concat","winner","react_default","a","createElement","className","onClick","onSlotClick","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","slots","Array","fill","_this2","_this$props","filledSlots","winnerSlots","map","slot","index","Slot_Slot","key","includes","get","renderSlots_","PureComponent","Storage","storageName","arguments","length","undefined","initialValue","localStorage","getItem","setItem","JSON","parse","data","stringify","App","hasNoPlayers_","setPlayersFromURL_","state","Map","game","onGameEnd","onGameEnd_","bind","assertThisInitialized","storage_","_this$props$match$par","match","params","firstPlayer","secondPlayer","playersManager_","addPlayer","checkErros","some","error","code","gameLeaderBoard","getData","update","name","toConsumableArray","setState","fillSlot","getBoard","board_Board","onSlotClick_","react_router_dom","to","leaderboardMessage","Component","Setup","playerOneName","playerTwoName","_this$state","event","preventDefault","_this$state2","lenght","history","push","target","value","disabled","disableForm_","type","placeholder","onChange","onPlayerOneNameChange_","id","onPlayerTwoNameChange_","onFormSubmit_","LeaderBoard","storage","leaderBoard","href","goBack","renderWinnerMessage_","leader","Player","opts","class","PlayersManager","players","erros_","players_","currentPlayerIndex_","createPlayers_","playerName","Error","toLowerCase","currentPlayerIndex","switchPlayer","TicTacToe","playerOne","playerTwo","board_","playerId","checkSlot_","checkSlots_","currentPlayerId","isFunction","currentPlayer_","getCurrentPlayer","size","currentPlayer","set","getWinner_","onEndGame_","nextPlayerTurn","hasWinner","checkLines_","checkColumns_","checkDiagonalUpLeft_","checkDiagonalUpRight_","ReactDOM","render","basename","process","react_router","exact","path","route","setup_Setup","assign","src_App_0","leaderBoard_LeaderBoard","document","getElementById"],"mappings":"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","file":"static/js/main.7a4e367a.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Slot = props => {\n  let filledClass = '';\n\n  if (props.player) {\n    filledClass += `filled player${props.player}`;\n  }\n\n  if (props.winner) {\n    filledClass += ' winner';\n  }\n\n  return (\n    <div\n      className={`board-slot ${filledClass}`}\n      onClick={props.onSlotClick}\n    />\n  );\n};\n","import React, { PureComponent } from 'react';\nimport { Slot } from './Slot';\nimport './board.css';\n\n/* *\n * Class that renders the game board.\n * */\nclass Board extends PureComponent {\n\n  /**\n   * Creates a Board.\n   */\n  constructor(props) {\n    super(props);\n    this.slots = Array(9).fill(0, 0, 9);\n  }\n\n  /**\n   * Renders board slots that will be fufilled by gamers' pieces.\n   * @private \n   */\n  renderSlots_() {\n    let { filledSlots, winnerSlots } = this.props;\n    return this.slots.map((slot, index) => {\n      return (\n        <Slot\n          key={index}\n          winner={winnerSlots.includes(index)}\n          player={filledSlots.get(index)}\n          index={index}\n          onSlotClick={() => {\n            this.props.onSlotClick(index);\n          }}\n        />\n      );\n    })\n  }\n\n  /**\n   * @inheritdoc\n   */\n  render() {\n    return (\n      <div className=\"board\">\n        {this.renderSlots_()}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","class Storage {\n  constructor(storageName = 'gameLeaderBoard', initialValue = '[]') {\n    this.storageName = storageName;\n    if (!localStorage.getItem(storageName)) {\n      localStorage.setItem(storageName, initialValue);\n    }\n  }\n\n  getData() {\n    return JSON.parse(localStorage.getItem(this.storageName));\n  }\n\n  update(data) {\n    localStorage.setItem(this.storageName, JSON.stringify(data));\n  }\n}\n\nexport default Storage;\n","import React, { Component } from 'react';\nimport Board from './board/Board';\nimport Storage from './storage/Storage';\nimport { Link } from 'react-router-dom'\nimport './App.css';\n\n/**\n * Initialize the game asking for players information. Manage players\n * turns and set in the board filled slots.\n * @author Fernando Souza nandosouzafilho@gmail.com\n **/\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    if (this.hasNoPlayers_()) {\n      this.setPlayersFromURL_();\n    }\n\n    this.state = {\n      filledSlots: new Map(),\n      winnerSlots: []\n    };\n    this.props.game.onGameEnd = this.onGameEnd_.bind(this);\n    this.storage_ = new Storage();\n  }\n\n  /**\n   * Uses url parameters to create players.\n   * @private\n   **/\n  setPlayersFromURL_() {\n    const { firstPlayer, secondPlayer } = this.props.match.params;\n    this.props.game.playersManager_.addPlayer(firstPlayer);\n    this.props.game.playersManager_.addPlayer(secondPlayer);\n  }\n\n  /**\n   * Checks if players was not already defined.\n   * @returns {Boolean}\n   * @private\n   **/\n  hasNoPlayers_() {\n    return this.props.game.playersManager_\n      .checkErros()\n      .some(error => error.code === 'no_players');\n  }\n\n  /**\n   * Callback method that will be called when the game is finished. It updates\n   * the local storage with the new winner and go to the Leaderboard page.\n   * @param {Object} winner The Player object.\n   * @private\n   **/\n  onGameEnd_(winner) {\n    if (winner) {\n      let gameLeaderBoard = this.storage_.getData();\n      this.storage_.update([winner.player.name, ...gameLeaderBoard]);\n      this.setState({\n        winnerSlots: winner.slots,\n        winner: winner\n      });\n    }\n  }\n\n  /**\n   * Handles the click event on the each slot and updates the filledSlots\n   * state.\n   * the turn to the next player.\n   * @param {Number} index The Board Slot index.\n   * @private\n   **/\n  onSlotClick_(index) {\n    if (this.state.winnerSlots.length > 0) {\n      return;\n    }\n    this.props.game.fillSlot(index);\n    this.setState({\n      filledSlots: this.props.game.getBoard()\n    });\n  }\n\n  /**\n   * @inheritdoc\n   **/\n  render() {\n    const leaderboardMessage = () => {\n      if (this.state.winner) {\n        return (\n          <p className=\"winner-message\">\n            Congratulations {this.state.winner.player.name}. <Link to=\"/leaderboard\">\n              See leaderboard\n            </Link>\n          </p>\n        );\n      }\n    }\n    return (\n      <div className=\"tic-tac-toe-app\">\n        <Board\n          winnerSlots={this.state.winnerSlots}\n          filledSlots={this.state.filledSlots}\n          onSlotClick={this.onSlotClick_.bind(this)}\n        />\n\n        <Link className=\"button new-game-button\" to=\"/\">\n          New game\n        </Link>\n\n        <div className=\"app-footer\">\n        {leaderboardMessage.bind(this)()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport './setup.css';\n\n/**\n * Component responsible for getting players` name and passes it to the parent \n * component through a function named `onFinishSetup`.\n **/\nclass Setup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playerOneName: '',\n      playerTwoName: '',\n    }\n  }\n\n  /**\n   * Express conditions to disable form submission.\n   * @returns {boolean} true for disable and false for enable\n   * @private \n   **/\n  disableForm_() {\n    let { playerOneName, playerTwoName } = this.state;\n    return !playerOneName || !playerTwoName || playerOneName === playerTwoName;\n  }\n\n  /**\n   * Listens to the form submission and informs players` name to the\n   * parent component.\n   * @param {event} event The event object\n   * @private \n   **/\n  onFormSubmit_(event) {\n    event.preventDefault();\n    let { playerOneName, playerTwoName } = this.state;\n    if (!this.props.game.playersManager_.checkErros().lenght) {\n      this.props.history.push(`/firstPlayer/${playerOneName}/secondPlayer/${playerTwoName}`);\n    }\n  }\n\n  /**\n   * Stores the first player's name in the state object.\n   * @param {event} event The event object\n   * @private \n   **/\n  onPlayerOneNameChange_(event) {\n    this.setState({\n      playerOneName: event.target.value\n    });\n  }\n  \n  /**\n   * Stores the second player's name in the state object.\n   * @param {event} event The event object\n   * @private \n   **/\n  onPlayerTwoNameChange_(event) {\n    this.setState({\n      playerTwoName: event.target.value\n    });\n  }\n\n  /**\n   * @inheritdoc\n   **/\n  render() {\n    let disabled = this.disableForm_();\n\n    return (\n      <div className=\"tic-tac-toe-app\">\n        <div className=\"setup-page\">\n          <div className=\"collumn\">\n            <div className=\"player\">\n              <div className=\"icon-x\"></div>\n            </div>\n            <input\n              type=\"text\"\n              value={this.state.playerOneName}\n              placeholder=\"Player one\"\n              onChange={this.onPlayerOneNameChange_.bind(this)}\n              id=\"playerOne\" />\n          </div>\n\n          <div className=\"collumn\">\n            <div className=\"player\">\n              <div className=\"icon-circle\"></div>\n            </div>\n            <input\n              type=\"text\"\n              value={this.state.playerTwoName}\n              placeholder=\"Player two\"\n              onChange={this.onPlayerTwoNameChange_.bind(this)}\n              id=\"playerTwo\" />\n          </div>\n        </div>\n        <button disabled={disabled} onClick={this.onFormSubmit_.bind(this)}> Start! </button>\n      </div>\n    );\n  }\n}\n\nexport default Setup;\n","import React, { Component } from 'react';\nimport Storage from '../storage/Storage';\nimport { Link } from 'react-router-dom'\nimport './leader-board.css';\n\nclass LeaderBoard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  /**\n   * @inheritdoc\n   */\n  componentWillMount() {\n    let storage = new Storage().getData();\n    this.setState({\n      leaderBoard: storage\n    });\n  }\n\n  /**\n   * Renders winner congratulation message.\n   * @private \n   */\n  renderWinnerMessage_() {\n    let  { winner } = this.props.match.params;\n\n    if (!winner) {\n      return (\n        <div>\n          <p>\n            We do not have leaders to how.\n            Why don't you <Link to=\"/\">play</Link> to see if you can put \n            your name here?\n          </p>\n          <Link to=\"/\">New game</Link>\n        </div>\n      )\n    }\n\n    return (\n      <div>\n        <p>\n          Congratulations, <strong>{winner}</strong>!!!\n          Now you are in our leaderboard.\n        </p>\n\n        <p>\n          Are you ready to <a href=\"\" onClick={this.props.history.goBack}>\n          play again</a> aganst you partner or start a \n          <Link to=\"/\">new game</Link>?\n        </p>\n      </div>\n    );\n  }\n\n  /**\n   * @inheritdoc\n   */\n  render() {\n    let leaderBoard = this.state.leaderBoard;\n    return (\n      <div className=\"leader-board\">\n        <h1>Leaderboard</h1>\n        {this.renderWinnerMessage_()}\n        <ul>\n        {leaderBoard.map((leader, key) => {\n          return <li key={key}>{leader}</li>\n        })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default LeaderBoard\n","class Player {\n  constructor(opts) {\n    this.id = opts.id;\n    this.name = opts.name || '';\n    this.class = opts.class || ''\n  }\n}\n\nexport default Player;\n","import Player from './Player';\n\n/**\n * Manages players providing a public API for adding players and sets which one \n * is in the turn.\n **/\nclass PlayersManager {\n  erros_ = [];\n  players_ = [];\n  currentPlayerIndex_ = 0;\n\n  constructor(players = []) {\n    this.createPlayers_(players);\n  }\n\n  /**\n   * Adds a single player to the array of players by crating a new Player\n   * instance.\n   * @param {String} playerName The player data to create a new Player instance.\n   **/\n  addPlayer(playerName) {\n    if (!playerName) {\n      throw Error('Player configuration should be informed');\n    }\n    const player = {\n      name: playerName,\n      id: this.players_.length + 1,\n      class: 'player' + this.players_.length + 1\n    };\n    this.players_.push(new Player(player));\n  }\n\n  /**\n   * Checks if there are erros regarding players.\n   * @returns {Array} Array of errors\n   **/\n  checkErros() {\n    this.erros_ = [];\n    if (!this.players_.length) {\n      this.erros_.push({ code: 'no_players' });\n      return this.erros_;\n    }\n    if (\n      this.players_[0].name.toLowerCase() ===\n      this.players_[1].name.toLowerCase()\n    ) {\n      this.erros_.push({ code: 'duplicated_names' });\n    }\n    return this.erros_;\n  }\n\n  /**\n   * Method used by the class constructor to create fill the initial list of\n   * players.\n   * @param {Array<Object>} players A array of players data.\n   * @private\n   **/\n  createPlayers_(players) {\n    this.players_ = players.map(player => {\n      return new Player(player);\n    });\n  }\n\n  /**\n   * Returns the current player.\n   * @returns {Object} Player\n   **/\n  getCurrentPlayer() {\n    return this.players_[this.currentPlayerIndex_];\n  }\n\n  /**\n   * Returns the list of players.\n   * @returns {Array<Object>} The list of players\n   **/\n  getPlayers() {\n    return [...this.players_];\n  }\n\n  /**\n   * Changes the game turn to the next available player. Select the first player\n   * of the array if no next one is found.\n   **/\n  nextPlayerTurn() {\n    let currentPlayerIndex = this.currentPlayerIndex_;\n    currentPlayerIndex++;\n\n    if (currentPlayerIndex >= this.players_.length) {\n      currentPlayerIndex = 0;\n    }\n\n    return this.switchPlayer(currentPlayerIndex);\n  }\n\n  /**\n   * Changes the current player by providing its index.\n   * @param {number} index The player index.\n   **/\n  switchPlayer(index) {\n    if (index !== 0 && this.players_.length < index) {\n      throw Error('Player not found');\n    }\n    this.currentPlayerIndex_ = index;\n    return this.players_[index];\n  }\n}\n\nexport default PlayersManager;\n","import PlayersManager from '../ticTacToe/PlayersManager';\nimport { isFunction } from 'underscore';\n\nclass TicTacToe {\n  onGameEnd;\n\n  constructor(playerOne, playerTwo, onGameEnd) {\n    this.board_ = new Map();\n    this.onGameEnd = onGameEnd;\n    this.playersManager_ = new PlayersManager();\n    if (playerOne && playerTwo) {\n      this.playersManager_.addPlayer(playerOne);\n      this.playersManager_.addPlayer(playerTwo);\n    }\n  }\n\n  checkSlots_(slots, playerId) {\n    if (slots.length < 3) {\n      return;\n    }\n\n    if (\n      this.checkSlot_(slots[0], playerId) &&\n      this.checkSlot_(slots[1], playerId) &&\n      this.checkSlot_(slots[2], playerId)\n    ) {\n      return slots;\n    }\n  }\n\n  /**\n   * Checks if there is any matched column by a given player.\n   * @param {Number} playerId The player id to be checked.\n   * @returns {boolean} Returns true if a matched column is found, otherwise\n   * it returns false.\n   * @private\n   **/\n  checkColumns_(playerId) {\n    return (\n      this.checkSlots_([0, 3, 6], playerId) ||\n      this.checkSlots_([1, 4, 7], playerId) ||\n      this.checkSlots_([2, 5, 8], playerId)\n    );\n  }\n\n  /**\n   * Checks if the diagonal line starting from the top-left slot has been\n   * filled by the current player.\n   * @param {Number} playerId The player id to be checked.\n   * @returns {boolean} Returns true if the diagonal line has been filled by\n   * a player, otherwise, false.\n   * @private\n   **/\n  checkDiagonalUpLeft_(playerId) {\n    return this.checkSlots_([0, 4, 8], playerId);\n  }\n\n  /**\n   * Checks if the diagonal line starting from the top-right slot has been\n   * filled by the current player.\n   * @param {Number} playerId The player id to be checked.\n   * @returns {boolean} Returns true if the diagonal line has been filled by\n   * a player, otherwise, false.\n   * @private\n   **/\n  checkDiagonalUpRight_(playerId) {\n    return this.checkSlots_([2, 4, 6], playerId);\n  }\n\n  /**\n   * Walks through Board lines looking for unmatched slots in order to\n   * determine if the current player got a line matching. Returns true if\n   * it has, otherwise returns false.\n   * @param {Number} playerId The player id to be checked\n   * @returns {boolean} Returns true if a matched line is found, otherwise, false.\n   * @private\n   **/\n  checkLines_(playerId) {\n    return (\n      this.checkSlots_([0, 1, 2], playerId) ||\n      this.checkSlots_([3, 4, 5], playerId) ||\n      this.checkSlots_([6, 7, 8], playerId)\n    );\n  }\n\n  /**\n   * Checks if the slot was filled by an given player.\n   * @param {Number} index The slot index.\n   * @param {Number} currentPlayerId The player id.\n   * @private\n   **/\n  checkSlot_(index, currentPlayerId) {\n    return this.board_.get(index) === currentPlayerId;\n  }\n\n  /**\n   * Calls the onGameEnd listener callback with the winner's instance.\n   * @param {Object|undefined} winner The user who won the game.\n   **/\n  onEndGame_(winner) {\n    if (isFunction(this.onGameEnd)) {\n      return this.onGameEnd(winner);\n    }\n  }\n\n  /**\n   * Fills a specific board slot and also checks if there is a winner,\n   * if it has, do not call the next game turn and end the game.\n   * @param {Number} index the slot index.\n   **/\n  fillSlot(index) {\n    let currentPlayer_ = this.playersManager_.getCurrentPlayer();\n    if (this.board_.get(index)) {\n      return;\n    }\n\n    if (this.board_.size < 9) {\n      let currentPlayer = currentPlayer_;\n      this.board_.set(index, currentPlayer.id);\n    }\n\n    let winner = this.getWinner_();\n\n    if (winner || this.board_.size === 9) {\n      this.onEndGame_(winner);\n    } else {\n      this.playersManager_.nextPlayerTurn();\n    }\n  }\n\n  /**\n   * Returns the list of filled slots.\n   * @returns {Map<Object>} The game board.\n   **/\n  getBoard() {\n    return this.board_;\n  }\n\n  /**\n   * Checks all the possibilities of have a winner and return the Player instance.\n   * @returns {Object|undefined} Returns the currentPlayer if a winner is found\n   * @private\n   **/\n  getWinner_() {\n    let currentPlayer = this.playersManager_.getCurrentPlayer();\n    let playerId = currentPlayer.id;\n    let hasWinner =\n      this.checkLines_(playerId) ||\n      this.checkColumns_(playerId) ||\n      this.checkDiagonalUpLeft_(playerId) ||\n      this.checkDiagonalUpRight_(playerId);\n\n    if (hasWinner) {\n      return {\n        player: currentPlayer,\n        slots: hasWinner\n      };\n    }\n  }\n}\n\nexport default TicTacToe;\n","import React from 'react';\nimport App from '../App';\nimport Setup from '../setup/Setup';\nimport LeaderBoard from '../leaderBoard/LeaderBoard';\nimport TicTacToe from '../ticTacToe/TicTacToe';\nimport {\n  BrowserRouter as Router,\n  Route\n} from 'react-router-dom';\n\nlet game = new TicTacToe();\n\nexport default props => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div>\n        <Route exact path=\"/\" render={route => {\n            return <Setup {...route} game={game} />;\n          }}\n        />\n        <Route path=\"/firstPlayer/:firstPlayer/secondPlayer/:secondPlayer\" render={route => {\n            return <App {...route} game={game} />;\n          }}\n        />\n        <Route path=\"/leaderboard\" render={route => {\n            return <LeaderBoard {...route} game={game} />;\n          }}\n        />\n      </div>\n    </Router>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './routes/Routes';\n\nReactDOM.render(\n  <Routes />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}